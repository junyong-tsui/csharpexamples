进程：
		背景：cpu在同一时刻只能执行一条指令，意味着在同一时刻只有一个程序处于激活状态,其他
	程序处于阻塞状态。而cpu在不同程序间切换速度很快，这样使用户觉得好像多个程序都在执行。主要为了
	满足多任务操作系统的需求。
	  
	    概念:
			1操作系统进行调度和资源分配的最小逻辑单元
			2软件实体上从出生到消亡的一个活动过程,就是逻辑抽象而已。
			3进程和进程是隔离的，主要通过内存边界控制。也就是不同进程在不同的内存区执行。对临界资源
	的访问通过进程同步机制完成。(参考Os进程与进程的同步问题)
			4实现多任务并发执行
线程:
        背景:	
	         线程出现之前,进程持有内存、寄存器等资源非常大，造成切换效率非常低。
	同时也需要一个程序的多个任务能够并发执行，从而进一步加快程序得执行。这个时候又抽象出了线程这个
	逻辑实体。一个程序的多个任务让不同的线程去执行，同步这些线程，让程序跑的更快。这就是线程的起源。
	            
			 为什么有了线程后程序跑的更快？
			      
				  这样想：cpu这时在不同的线程上切换，一个程序若有了多个线程后，那么cpu切换到该线程
			 的可能性会变大，程序自然较单线程程序块。另外多线程后计算机的资源能够得到更好的利用。

       
	    概念:
             1持有它执行所必需的资源如寄存器,栈指针，共享的代码存储区
             2指向一个方法体，方法体是该线程任务的逻辑划分。线程其实是一个方法的执行流
             3线程完成后不使用的时候线程应该释放。线程还是比较耗资源，至少持有1M
    的线程栈空间。			 

		
         