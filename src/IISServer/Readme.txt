web开发模型：

   1什么是浏览器？
        渲染引擎：解析html,执行js,css渲染最终呈现可视化的网页。
		通信模块：通过协议和服务端通信，底层用的就是socket通信。
		交互模块：能处理用户的交互信息。

   2什么是web服务器?
        web服务器处理浏览器发来的请求，并返回html信息。可以看成
web服务器就是消息处理器，处理的结果就是html字节流.
      
   3简易服务器分析与设计：        
       
	    侦听模块：    侦听浏览器发的请求。
		             socket 监听请求
	
		处理请求模块： 处理浏览器发的请求。
		            
					 httpRequest : 封装浏览器发来的请求信息   对应请求报文
					
					 httpResponse: 封装了服务器处理的结果     对象相应报文
		            
					 HttpContext : 封装当前的请求和响应，封装了	处理当请求的所有信息。、
		其他类均通过它访问和设置请求信息
		                 这里为什么要有HttpContext?
						     HttpContext上知天文，下知地理，整个处理管道均可获取的对象
		          
				     HttpApplication处理请求，HttpApplication	其实就是处理该请求的一个分发类,
		请求的种类可能有多种，这里就简单的处理静态文件，css,js,img,aspx文件。不同的请求交给不同的
		IHttpHandler处理，之所以将具体的处理封装出去。这里一方面考虑	单一职责原理，另一方面考虑
		IHttpHandler的扩展问题，另一方面写死了不好扩展，暂时理解到这个层次。其实应该通过配置文件来
		配置不同类型文件的处理程序，读配置获取对应的IHttpHandler。实现分发与实际处理解耦,这样来了
		新类型的文件的请求，HttpApplication就不需要修改了，满足开闭原则。
	           
			         IHttpHandler：
						 静态的文件用IStaticHandler处理,js,css，img,静态html本质上就是静态内容，
					 这里就用IStaticHandler处理,简单返回字节数组
						 动态文件aspx用HttpHandler处理,用来处理动态页面。
					 为什么要定义接口？
					        由于同种后缀不同文件的请求的处理是不一样的，返回的html流也是
					 不一样的。这些不同文件之间不一定能抽象出父类。但是又要处理aspx的所有文件，这个
					 时候就想到了接口，定义一个ProcessRequest(httpContext)方法，要求aspx文件必须
					 实现此接口，否则用户请求该aspx文件的时候，此文件就不能处理该请求了。这样同种后缀
					 文件aspx就可以按照自己的想法处理自己的页面(在请求的时候)
					 

			       
	    
	     
    